/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle vlue to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specifiy the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specifiy the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@import url(http://fonts.googleapis.com/css?family=Open+Sans:800,600,400,300|Open+Sans+Condensed:300,700|Lato:100,300,400);
* {
  background: rgba(0, 0, 0, 0.05);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#10000000, endColorstr=#10000000); }

.navbar {
  background-color: white;
  height: 80px; }
  .navbar a {
    text-decoration: none; }
  .navbar .brand {
    *zoom: 1;
    display: inline;
    clear: none;
    text-align: inherit;
    float: left;
    width: 58.8%;
    padding-left: 0;
    padding-right: 0;
    margin-left: 0%;
    margin-right: 3%;
    font-family: "Open Sans", sans-serif;
    font-size: 30px;
    letter-spacing: 1px;
    text-transform: uppercase;
    margin: 16px 0; }
    .navbar .brand:before, .navbar .brand:after {
      content: '';
      display: table; }
    .navbar .brand:after {
      clear: both; }
    .navbar .brand:last-child {
      margin-right: 0%; }
  .navbar ul {
    *zoom: 1;
    display: inline;
    clear: none;
    text-align: inherit;
    float: left;
    width: 38.2%;
    padding-left: 0;
    padding-right: 0;
    margin-left: 0%;
    margin-right: 3%;
    float: right;
    margin-top: 30px; }
    .navbar ul:before, .navbar ul:after {
      content: '';
      display: table; }
    .navbar ul:after {
      clear: both; }
    .navbar ul:last-child {
      margin-right: 0%; }
    .navbar ul li {
      display: inline;
      *zoom: 1;
      display: inline;
      clear: none;
      text-align: inherit;
      float: left;
      width: 22.75%;
      padding-left: 0;
      padding-right: 0;
      margin-left: 0%;
      margin-right: 3%;
      font-family: "Open Sans", sans-serif;
      font-size: 30px;
      letter-spacing: 1px;
      text-transform: uppercase;
      font-size: 15px; }
      .navbar ul li:before, .navbar ul li:after {
        content: '';
        display: table; }
      .navbar ul li:after {
        clear: both; }
      .navbar ul li:last-child {
        margin-right: 0%; }

.home img {
  max-width: 100%; }

h1 {
  text-align: center;
  font-family: "Open Sans", sans-serif;
  letter-spacing: 1px;
  text-transform: uppercase;
  font-weight: 200;
  background-color: white;
  padding: 10px; }

.about p {
  *zoom: 1;
  display: inline;
  clear: none;
  text-align: inherit;
  float: left;
  width: 65.66667%;
  padding-left: 0;
  padding-right: 0;
  margin-left: 0%;
  margin-right: 3%; }
  .about p:before, .about p:after {
    content: '';
    display: table; }
  .about p:after {
    clear: both; }
  .about p:last-child {
    margin-right: 0%; }
.about img {
  *zoom: 1;
  display: inline;
  clear: none;
  text-align: inherit;
  float: left;
  width: 31.33333%;
  padding-left: 0;
  padding-right: 0;
  margin-left: 0%;
  margin-right: 3%;
  max-height: 450px;
  max-width: 300px; }
  .about img:before, .about img:after {
    content: '';
    display: table; }
  .about img:after {
    clear: both; }
  .about img:last-child {
    margin-right: 0%; }

.portfolio .first-project {
  *zoom: 1;
  width: auto;
  max-width: 750px;
  float: none;
  display: block;
  margin-left: auto;
  margin-right: auto;
  padding-left: 0;
  padding-right: 0; }
  .portfolio .first-project:before, .portfolio .first-project:after {
    content: '';
    display: table; }
  .portfolio .first-project:after {
    clear: both; }
.portfolio .second-project {
  *zoom: 1;
  width: auto;
  max-width: 750px;
  float: none;
  display: block;
  margin-left: auto;
  margin-right: auto;
  padding-left: 0;
  padding-right: 0; }
  .portfolio .second-project:before, .portfolio .second-project:after {
    content: '';
    display: table; }
  .portfolio .second-project:after {
    clear: both; }
.portfolio .third-project {
  *zoom: 1;
  width: auto;
  max-width: 750px;
  float: none;
  display: block;
  margin-left: auto;
  margin-right: auto;
  padding-left: 0;
  padding-right: 0; }
  .portfolio .third-project:before, .portfolio .third-project:after {
    content: '';
    display: table; }
  .portfolio .third-project:after {
    clear: both; }

/*# sourceMappingURL=style.css.map */
